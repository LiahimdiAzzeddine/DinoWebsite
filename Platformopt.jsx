/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 ./public/models/platformopt.glb 
*/

import React from 'react'
import { useGraph } from '@react-three/fiber'
import { useGLTF, PerspectiveCamera } from '@react-three/drei'
import { SkeletonUtils } from 'three-stdlib'

export function Model(props) {
  const { scene } = useGLTF('/platformopt.glb')
  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene])
  const { nodes, materials } = useGraph(clone)
  return (
    <group {...props} dispose={null}>
      <PerspectiveCamera makeDefault={false} far={1000.134} near={0.3} fov={45} position={[2.303, 6.121, 7.028]} rotation={[-0.172, 0.112, 0.019]} />
      <directionalLight intensity={3.142} decay={2} position={[0, 4.03, 0]} scale={0} target={nodes.Directional_Light.target}>
        <primitive object={nodes.Directional_Light.target} position={[0, 0, -1]} />
      </directionalLight>
      <mesh geometry={nodes.GroundCubeQuad.geometry} material={materials.Ground_FileSize_Mat} position={[0, 3.599, -0.13]} scale={[1.2, 1, 0.792]} />
      <mesh geometry={nodes.GroundLayerSize.geometry} material={materials.Opaque_Mat} position={[0, 3.599, 0]} />
    </group>
  )
}

useGLTF.preload('/platformopt.glb')
