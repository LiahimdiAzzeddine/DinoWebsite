/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 ./public/models/animals.glb 
*/

import React, { useEffect, useLayoutEffect, useRef } from 'react'
import { useGraph, useThree } from '@react-three/fiber'
import { useGLTF, useAnimations, PerspectiveCamera ,OrbitControls} from '@react-three/drei'
import { SkeletonUtils } from 'three-stdlib'
import { DragControls } from '@react-three/drei';

export function Animals(props) {
  const group = React.useRef()
  const camRef = useRef()
  const { scene, animations } = useGLTF('./models/animals.glb')
  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene])
  const { nodes, materials } = useGraph(clone)
  const { actions } = useAnimations(animations, group)
  const alpacaGroup = useRef();
const dragControls = useRef();

    useEffect(() => {
      if (actions) {
       // Object.values(actions).forEach((action) => action.play())
      }
    }, [actions])
    useEffect(() => {
      if (dragControls.current) {
        dragControls.current.addEventListener('dragstart', (event) => {
          console.log("ðŸš€ ~ dragControls.current.addEventListener ~ dragstart:", event)
          
        });
        dragControls.current.addEventListener('drag', (event) => {
          console.log("ðŸš€ ~ dragControls.current.addEventListener ~ drag:", event)
        });
        dragControls.current.addEventListener('dragend', (event) => {
          console.log("ðŸš€ ~ dragControls.current.addEventListener ~ dragend:", event)
        });
      }
    }, [])

    /*
      useLayoutEffect(() => {
     
          console.log("ðŸš€ ~ useLayoutEffect ~ camRef.current:", camRef.current)
        camRef.current.position.set(0.4333,1.169, 1.4868);
        camRef.current.lookAt(0.6659, 0.4029, -0.7906)
     
        
        
      }, [scene]);*/
  return (
    <>
    {/**
    <PerspectiveCamera
      ref={camRef}
      makeDefault
      fov={75}
      far={1000}
    /> */}

    <group ref={group} {...props} dispose={null} position={[0,0,0]}  scale={0.2}>
      <group name="Scene">
      <DragControls ref={dragControls} objects={[alpacaGroup.current]}>
      <group ref={alpacaGroup} name="AnimalArmature" position={[-2.067, 4.056, 0.96]} rotation={[0, -0.191, 0]} scale={0.355}>
          <primitive object={nodes.Body} />
          <primitive object={nodes.IKBackLegL} />
          <primitive object={nodes.IKFrontLegL} />
          <primitive object={nodes.IKBackLegR} />
          <primitive object={nodes.IKFrontLegR} />
          <group name="Alpaca">
            <skinnedMesh name="Cube001" geometry={nodes.Cube001.geometry} material={materials.Main} skeleton={nodes.Cube001.skeleton} />
            <skinnedMesh name="Cube001_1" geometry={nodes.Cube001_1.geometry} material={materials.Main_Light} skeleton={nodes.Cube001_1.skeleton} />
            <skinnedMesh name="Cube001_2" geometry={nodes.Cube001_2.geometry} material={materials.Hooves} skeleton={nodes.Cube001_2.skeleton} />
            <skinnedMesh name="Cube001_3" geometry={nodes.Cube001_3.geometry} material={materials.Main_Dark} skeleton={nodes.Cube001_3.skeleton} />
            <skinnedMesh name="Cube001_4" geometry={nodes.Cube001_4.geometry} material={materials.Muzzle} skeleton={nodes.Cube001_4.skeleton} />
            <skinnedMesh name="Cube001_5" geometry={nodes.Cube001_5.geometry} material={materials.Eyes_Black} skeleton={nodes.Cube001_5.skeleton} />
            <skinnedMesh name="Cube001_6" geometry={nodes.Cube001_6.geometry} material={materials.Eyes_White} skeleton={nodes.Cube001_6.skeleton} />
          </group>
        </group>
        </DragControls>
        <group name="AnimalArmature001" position={[1.31, 4.041, -0.466]} rotation={[0, 0.621, 0]} scale={0.36}>
          <primitive object={nodes.Body_1} />
          <primitive object={nodes.IKBackLegL_1} />
          <primitive object={nodes.IKFrontLegL_1} />
          <primitive object={nodes.IKBackLegR_1} />
          <primitive object={nodes.IKFrontLegR_1} />
          <group name="Stag">
            <skinnedMesh name="Cube002" geometry={nodes.Cube002.geometry} material={materials['Material.001']} skeleton={nodes.Cube002.skeleton} />
            <skinnedMesh name="Cube002_1" geometry={nodes.Cube002_1.geometry} material={materials['Material.002']} skeleton={nodes.Cube002_1.skeleton} />
            <skinnedMesh name="Cube002_2" geometry={nodes.Cube002_2.geometry} material={materials['Material.003']} skeleton={nodes.Cube002_2.skeleton} />
            <skinnedMesh name="Cube002_3" geometry={nodes.Cube002_3.geometry} material={materials['Material.010']} skeleton={nodes.Cube002_3.skeleton} />
            <skinnedMesh name="Cube002_4" geometry={nodes.Cube002_4.geometry} material={materials['Material.011']} skeleton={nodes.Cube002_4.skeleton} />
          </group>
        </group>
        <mesh name="GroundCubeQuad" geometry={nodes.GroundCubeQuad.geometry} material={materials['Ground_FileSize_Mat.001']} position={[0, 3.599, -0.13]} scale={[1.2, 1, 0.792]} />
        <mesh name="GroundLayerSize" geometry={nodes.GroundLayerSize.geometry} material={materials['Opaque_Mat.001']} position={[0, 3.599, 0]} />
      </group>
    </group> </>
  )
}

useGLTF.preload('./models/animals.glb')
