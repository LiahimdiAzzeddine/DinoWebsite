/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 ./public/models/customshaders.glb 
*/

import React, { useEffect } from 'react'
import { useGraph } from '@react-three/fiber'
import { useGLTF, PerspectiveCamera, useAnimations } from '@react-three/drei'
import { SkeletonUtils } from 'three-stdlib'

export function Customshaders(props) {
  const group = React.useRef()
  const { scene, animations } = useGLTF('./models/customshaders.glb')
  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene])
  const { nodes, materials } = useGraph(clone)
  console.log("ðŸš€ ~ Customshaders ~ materials:", materials)
  const { actions } = useAnimations(animations, group)
  useEffect(() => {
    if (actions) {
      Object.values(actions).forEach((action) => action.play())
    }
  }, [actions]) 
  return (
    <group ref={group} {...props} dispose={null} >
      <group scale={0.5}>
        <group name="AnimationRoot" position={[0, 5.23, 0]}>
          <group name="ShaderObjects" position={[0, -2.971, 0]} scale={0}>
            <group name="ShaderWobble" position={[0, 0.5, 0]} rotation={[-Math.PI, -0.962, -Math.PI]} scale={2}>
              <mesh name="Sphere_(4)" geometry={nodes['Sphere_(4)'].geometry} material={materials['Wobble 1']} scale={2.09} />
            </group>
            <group name="Hologram" scale={1.5}>
              <group name="Cactus" position={[0, -0.7, 0]} rotation={[0, 0, -0.34]} scale={1.574}>
                <mesh name="CactusFlat" geometry={nodes.CactusFlat.geometry} material={materials['HologramShader 1']} />
              </group>
            </group>
            <group name="TesselatedCapsule" position={[0, 0.263, 0]} rotation={[2.069, 0.731, -2.991]} scale={3.185}>
              <mesh name="TesselatedCapsule_1" geometry={nodes.TesselatedCapsule_1.geometry} material={materials.UnlitTwist} />
            </group>
            <group name="DissolveSphere" position={[0, 0.569, 0]} scale={1.84}>
              <mesh name="Sphere_2" geometry={nodes.Sphere_2.geometry} material={materials['DissolveLayer 2']} position={[0, 0, 0]} scale={1.009} />
              <mesh name="Sphere_3" geometry={nodes.Sphere_3.geometry} material={materials['DissolveLayer 3']} position={[0, 0, 0]} />
            </group>
          </group>
        </group>
        <PerspectiveCamera name="View" makeDefault={true} far={1000.134} near={0.3} fov={40} position={[-9.836, 7.7, 12.608]} rotation={[-0.099, -0.803, -0.072]} />
        <directionalLight intensity={3.142} decay={2} position={[0, 4.03, 0]} scale={0} target={nodes.Directional_Light.target}>
          <primitive object={nodes.Directional_Light.target} position={[0, 0, -1]} />
        </directionalLight>
        <mesh name="Quad" geometry={nodes.Quad.geometry} material={materials.UnlitTwist} position={[2.977, 7.26, 0.62]} rotation={[-Math.PI, 0.862, Math.PI]} scale={[6.275, 3.523, 3.523]} />
        <mesh name="MoviePanel" geometry={nodes.MoviePanel.geometry} material={materials.MoviePanelBorder} position={[3.003, 7.264, 0.597]} rotation={[0, -0.862, 0]} scale={[1.594, 1.574, 1.055]} />
        <mesh name="MetalDoorDring" geometry={nodes.MetalDoorDring.geometry} material={materials.Metal} position={[0, 3.54, 0]}>
          <mesh name="MetalDoor1" geometry={nodes.MetalDoor1.geometry} material={materials.Metal} position={[1.511, 0.155, 0]} />
          <mesh name="MetalDoor2" geometry={nodes.MetalDoor2.geometry} material={materials.Metal} position={[-1.511, 0.155, 0]} rotation={[Math.PI, 0, Math.PI]} />
        </mesh>
        <mesh name="GroundCylinderTransparent" geometry={nodes.GroundCylinderTransparent.geometry} material={materials.Ground_CustomShaders_Mat} position={[0, 1.377, 0]} scale={[0.915, 1, 0.915]} />
        <mesh name="GroundCylinderTransparent_1" geometry={nodes.GroundCylinderTransparent_1.geometry} material={materials.OpaqueGround_CustomShaders_Mat} position={[0, 1.377, 0]} scale={[0.915, 1, 0.915]} />
      </group>
    </group>
  )
}

useGLTF.preload('./models/customshaders.glb')
