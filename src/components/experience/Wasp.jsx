/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 ./public/models/Wasp.glb 
*/

import React, { useEffect } from 'react'
import { useGraph } from '@react-three/fiber'
import { useGLTF, PerspectiveCamera, useAnimations } from '@react-three/drei'
import { SkeletonUtils } from 'three-stdlib'
import { gsap } from 'gsap'
import { ScrollTrigger } from 'gsap/ScrollTrigger'

gsap.registerPlugin(ScrollTrigger)
export function Wasp(props) {
  const group = React.useRef()
  const { scene, animations } = useGLTF('./models/Wasp.glb')
  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene])
  const { nodes, materials } = useGraph(clone)
  const { actions, mixer } = useAnimations(animations, group)
  console.log("ðŸš€ ~ Wasp ~ actions:", actions)

  useEffect(() => {
    if (actions?.CameraAction) {
      const action = actions.CameraAction
      action.play()

      const action2 = actions.MetalDoorOpen
      action2.play()
      action.paused = true // We manually control the animation time

      const duration = action.getClip().duration // Total animation duration (in seconds)

      // Create a ScrollTrigger that syncs animation time with scroll progress
      ScrollTrigger.create({
        trigger: '#section5',
        start: 'top bottom',
        end: 'top top',
        scrub: true, // ðŸ’¡ Binds scroll position to animation time
        onUpdate: (self) => {
          const progress = self.progress
          action.time = progress * duration // Move to the correct time in the animation
          mixer.update(0) // Force update of the animation frame
        },
      })
    }
  }, [actions, mixer])


  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene">
        <group name="AnimationRoot" position={[0, 5.23, 0]}>
          <group name="ShaderObjects" position={[0, -2.971, 0]} scale={0}>
            <group name="DissolveSphere" position={[0, 16, 0]} scale={0}>
              <mesh name="Sphere_2" geometry={nodes.Sphere_2.geometry} material={materials['DissolveLayer 2']} position={[0, 16, 0]} scale={0} />
              <mesh name="Sphere_3" geometry={nodes.Sphere_3.geometry} material={materials['DissolveLayer 3']} position={[0, 16, 0]} scale={0} />
            </group>
            <group name="Hologram" position={[0, 16, 0]} scale={0}>
              <group name="Cactus" position={[0, 16, 0]} scale={0}>
                <mesh name="CactusFlat" geometry={nodes.CactusFlat.geometry} material={materials['HologramShader 1']} position={[0, 16, 0]} scale={0} />
              </group>
            </group>
            <group name="ShaderWobble" position={[0, 16, 0]} scale={0}>
              <mesh name="Sphere_(4)" geometry={nodes['Sphere_(4)'].geometry} material={materials['Wobble 1']} position={[0, 16, 0]} scale={0} />
            </group>
            <group name="TesselatedCapsule" position={[0, 16, 0]} scale={0}>
              <mesh name="TesselatedCapsule001" geometry={nodes.TesselatedCapsule001.geometry} material={materials.UnlitTwist} position={[0, 16, 0]} scale={0} />
            </group>
          </group>
        </group>
        <group name="WaspArmature" position={[0, 1.768, 0]} scale={0.044}>
          <primitive object={nodes.Root} />
          <primitive object={nodes.neutral_bone} />
          <group name="Wasp">
            <skinnedMesh name="Cylinder002" geometry={nodes.Cylinder002.geometry} material={materials.Yellow} skeleton={nodes.Cylinder002.skeleton} />
            <skinnedMesh name="Cylinder002_1" geometry={nodes.Cylinder002_1.geometry} material={materials.Black} skeleton={nodes.Cylinder002_1.skeleton} />
            <skinnedMesh name="Cylinder002_2" geometry={nodes.Cylinder002_2.geometry} material={materials.LightBlue} skeleton={nodes.Cylinder002_2.skeleton} />
            <skinnedMesh name="Cylinder002_3" geometry={nodes.Cylinder002_3.geometry} material={materials.Orange} skeleton={nodes.Cylinder002_3.skeleton} />
          </group>
        </group>
        <PerspectiveCamera name="Scene02" makeDefault={true} far={1000} near={0.1} fov={22.895} position={[-2.889, 7.053, 17.398]} rotation={[-0.051, -0.293, -0.015]} />
        <mesh name="Quad" geometry={nodes.Quad.geometry} material={materials.UnlitTwist} position={[2.977, 7.26, 0.62]} rotation={[-Math.PI, 0.862, -Math.PI]} scale={[6.275, 3.523, 3.523]} />
        <mesh name="MoviePanel" geometry={nodes.MoviePanel.geometry} material={materials.Metal} position={[3.003, 7.264, 0.597]} rotation={[0, -0.862, 0]} scale={[1.594, 1.574, 1.055]} />
        <mesh name="MetalDoorDring" geometry={nodes.MetalDoorDring.geometry} material={materials.Metal} position={[0, 3.54, 0]}>
          <mesh name="MetalDoor1" geometry={nodes.MetalDoor1.geometry} material={materials.Metal} position={[1.511, 0.155, 0]} />
          <mesh name="MetalDoor2" geometry={nodes.MetalDoor2.geometry} material={materials.Metal} position={[-1.511, 0.155, 0]} rotation={[Math.PI, 0, Math.PI]} />
        </mesh>
        <mesh name="GroundCylinderTransparent_1001" geometry={nodes.GroundCylinderTransparent_1001.geometry} material={materials.OpaqueGround_CustomShaders_Mat} position={[0, 1.377, 0]} scale={[0.915, 1, 0.915]} />
        <mesh name="Cylinder" geometry={nodes.Cylinder.geometry} material={materials['Material.001']} position={[0, 1.435, 0]} scale={2.231} />
      </group>
    </group>
  )
}

useGLTF.preload('./models/Wasp.glb')
