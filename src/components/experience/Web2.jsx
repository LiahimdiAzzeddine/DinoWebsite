/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 ./public/models/Web2.glb 
*/

import React, { useContext, useLayoutEffect } from 'react'
import { useGraph } from '@react-three/fiber'
import { useGLTF, PerspectiveCamera, useAnimations } from '@react-three/drei'
import { SkeletonUtils } from 'three-stdlib'
import gsap from "gsap";
import { ScrollTrigger } from "gsap/ScrollTrigger";
import * as THREE from "three";
import { AnimationContext } from "./AnimationContext";

gsap.registerPlugin(ScrollTrigger);
export function Web2(props) {
  const group = React.useRef()
  const { scene, animations } = useGLTF('./models/Web2.glb')
  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene])
  const { nodes, materials } = useGraph(clone)
  const { actions,mixer } = useAnimations(animations, group)
  console.log("ðŸš€ ~ Model ~ actions:", actions)
    const { currentModel } = useContext(AnimationContext);
    console.log("ðŸš€ ~ Web2 ~ currentModel:", currentModel)
    useLayoutEffect(() => {
      if (!actions || !mixer) return;
    
      const cameraAction = actions["CameraAction"];
      const cameraStart = actions["ActionEnter"];
      const cameraEnd = actions["Camera.001End"];
      if (cameraStart) {
               // mixer.stopAllAction();
                cameraStart.reset();
                cameraStart.setLoop(THREE.LoopOnce, 1);
                cameraStart.clampWhenFinished = true;
                cameraStart.paused = false;
                cameraStart.play();
              }
    
     
    }, [actions, mixer]);
  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene">
        <group name="Empty" position={[0.285, 5.921, -8.176]} rotation={[Math.PI / 2, 0, Math.PI / 2]} />
        <group name="Empty001" position={[23.142, 20.042, -2.994]} scale={0.15}>
        {currentModel=="Model2" &&(
        <PerspectiveCamera name="Camera" makeDefault={currentModel=="Model2"} far={1000} near={0.1} fov={16.696} position={[0, -0.094, 0.533]} rotation={[0, Math.PI / 2, 0]} scale={6.678} />
        )}
        </group>
        <group name="Armature" position={[0.025, 1.824, 0.193]} rotation={[2.999, 0.008, -0.001]}>
          <primitive object={nodes.Bone} />
          <skinnedMesh name="Cube" geometry={nodes.Cube.geometry} material={materials.Blackk} skeleton={nodes.Cube.skeleton} />
        </group>
        <group name="Armature001" position={[-0.091, 0.84, -0.237]} rotation={[0.077, 1.536, -0.317]} scale={0.336}>
          <primitive object={nodes.Bone_1} />
          <primitive object={nodes.Bone007} />
          <primitive object={nodes.Bone008} />
          <group name="Retopo_Sphere001">
            <skinnedMesh name="mesh001" geometry={nodes.mesh001.geometry} material={materials['Material.016']} skeleton={nodes.mesh001.skeleton} />
            <skinnedMesh name="mesh001_1" geometry={nodes.mesh001_1.geometry} material={materials.pants} skeleton={nodes.mesh001_1.skeleton} />
            <skinnedMesh name="mesh001_2" geometry={nodes.mesh001_2.geometry} material={materials.skin} skeleton={nodes.mesh001_2.skeleton} />
            <group name="Empty005" position={[0.384, 2.798, 0.238]} rotation={[0.027, 0.014, 0.848]} scale={1.043}>
              <group name="Trophy" position={[1.066, -0.035, 0.037]} rotation={[0.041, -0.036, 0.642]} scale={2.379}>
                <mesh name="Cylinder009" geometry={nodes.Cylinder009.geometry} material={materials.M_Tropy} />
                <mesh name="Cylinder009_1" geometry={nodes.Cylinder009_1.geometry} material={materials['Material.008']} />
                <mesh name="Cylinder009_2" geometry={nodes.Cylinder009_2.geometry} material={materials.Material} />
              </group>
            </group>
            <group name="Empty006" position={[-1.99, 2.358, 0.098]} rotation={[0.038, 0.005, 1.049]} scale={0.834}>
              <mesh name="Cube001" geometry={nodes.Cube001.geometry} material={materials.skin} position={[-0.12, -0.118, 0.312]} rotation={[-1.58, 0.644, 1.602]} scale={3.568} />
              <mesh name="Cube008" geometry={nodes.Cube008.geometry} material={materials.skin} position={[0.136, -0.126, 0.306]} rotation={[1.611, 1.033, -1.617]} scale={3.568} />
            </group>
          </group>
        </group>
        <group name="Cube011" position={[0.041, 1.846, 0.185]} rotation={[2.557, 0, Math.PI]} scale={[0.021, 0.667, 0.021]}>
          <mesh name="Cube019" geometry={nodes.Cube019.geometry} material={materials.Blackk} />
          <mesh name="Cube019_1" geometry={nodes.Cube019_1.geometry} material={materials['Material.008']} />
        </group>
        <mesh name="Sphere014" geometry={nodes.Sphere014.geometry} material={nodes.Sphere014.material} position={[-3.668, 4.674, -2.876]} scale={[0.45, 0.767, 0.767]} />
        <mesh name="Sphere001" geometry={nodes.Sphere001.geometry} material={nodes.Sphere001.material} position={[-3.668, 14.248, 2.701]} rotation={[Math.PI, 0, Math.PI]} scale={[0.45, 0.767, 0.767]} />
      </group>
    </group>
  )
}

useGLTF.preload('./models/Web2.glb')
