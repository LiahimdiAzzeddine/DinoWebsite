/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 ./public/models/Web2.glb 
*/

import React, {useContext, useEffect, useLayoutEffect, useMemo, useRef} from "react";
import {useFrame, useGraph, useThree} from "@react-three/fiber";
import { useGLTF, PerspectiveCamera, useAnimations } from "@react-three/drei";
import { SkeletonUtils } from "three-stdlib";
import gsap from "gsap";
import { ScrollTrigger } from "gsap/ScrollTrigger";
import * as THREE from "three";
import { AnimationContext } from "./AnimationContext";
gsap.registerPlugin(ScrollTrigger);

export function Web3({ sectionID, isActive, ...props }) {
  const group = useRef();
  const timelineRef = useRef(null);
  const playedScroll = useRef(false);
  const playedSecondScroll = useRef(false);
  const ManRef = useRef();

  const { scene, animations } = useGLTF("./models/web3Webp.glb");
  const clone = useMemo(() => SkeletonUtils.clone(scene), [scene]);
  const { nodes, materials } = useGraph(clone);
  const { actions, mixer } = useAnimations(animations, group);

  const {
    currentModel,
    setCurrentModel,
    isTransitioning,
    transitionDirection,
  } = useContext(AnimationContext);

  const firstAnimations = [
    "1.Tour",
    "1.hook",
    "1.slider",
    "3.ManAnimation",
    "Empty.005Action.001",
    "Empty.006Action",
  ];
  const scrollAnimations = [
    "2.Ladder2ndScroll",
    "4.Head2ndScroll",
    "5.Metal2ndScroll",
    "6.WaterTower2ndScroll",
    "7.Door2ndScroll",
    "9.Rocket2ndScroll",
  ];
  const secondScrollAnimations = ["Action", "8.Rocket3rdScroll"];
  let enterAnimation = actions["ActionEnter"];

  // scroll tracking
  let prevScrollTrigger = null;
  let disableOtherSections = () => {
    if (!prevScrollTrigger) {
      let currentScrollTrigger = ScrollTrigger.getById(sectionID);
      if (currentScrollTrigger && currentScrollTrigger.previous()) {
        prevScrollTrigger = currentScrollTrigger.previous();
        prevScrollTrigger.disable();
      }
    } else {
      prevScrollTrigger.disable();
    }
  };

  let enableOtherSections = ()=>{
    // use when scroll is too quick for transitions
    // this way any section t the end of the scroll could take control and disable the others
    ScrollTrigger.getAll().forEach((trigger) => {
      if (trigger.id !== sectionID) {
        trigger.enable();
      }
    })
  }

  let resetAllActions = () => {
    Object.values(actions).forEach((action) => {
      action.reset().paused = true;
    });
  };

  let playIntroAnimations = (reversed = false) => {
    enterAnimation.reset();
    enterAnimation.setLoop(THREE.LoopOnce, 1);
    enterAnimation.time = reversed ? enterAnimation.getClip().duration : 0; // jump to the end or beginning of the clip
    enterAnimation.timeScale = reversed ? -1 : 1;
    enterAnimation.clampWhenFinished = true;
    enterAnimation.play();
    scaleManToOriginalSize();
    if (!reversed) {
      firstAnimations.forEach((name) => actions[name]?.reset().play());
      actions["Armature.001Action"]?.reset().play();
    }
  };

  let scaleManToOriginalSize = () => {
    // scale man to original size
    gsap.to(ManRef.current.scale, {
      x: 0.029,
      y: 0.029,
      z: 0.029,
      duration: 0.5,
      ease: "power2.out",
    });
  }

  // handling screen width change
  const {viewport} = useThree();

  useLayoutEffect(() => {
    enterAnimation = actions["ActionEnter"];
    resetAllActions();

    ScrollTrigger.create({
      id: sectionID,
      trigger: "#section4",
      start: "top bottom",
      end: "#section5 bottom",
      preventClicks: true,
      scrub: true,
      markers: false,
      onEnter: () => {
        setCurrentModel(sectionID);
        disableOtherSections();
        resetAllActions();
        playIntroAnimations();
      },
      onEnterBack: () => {
        setCurrentModel(sectionID);
        disableOtherSections();
        resetAllActions();
        playIntroAnimations(true);
      },
      onLeaveBack: (self) => {
        playIntroAnimations(true);
        if (Math.abs(self.getVelocity()) <= 2000) {
          setTimeout(() => {
            prevScrollTrigger.enable();
          }, enterAnimation.getClip().duration * 1000);
        } else {
          enableOtherSections();
        }
      },
    });

    ScrollTrigger.create({
      id: sectionID + "_secondary",
      trigger: "#section5",
      start: "top bottom",
      end: "bottom top",
      scrub: 2.5,
      markers: false,
      onEnter: () => {
        setCurrentModel(sectionID);
        disableOtherSections();

        const action = actions["1.2ndScroll"];
        if (action) {
          action.reset();
          action.setLoop(THREE.LoopOnce, 1);
          action.clampWhenFinished = true;
          action.time = action.getClip().duration - 0.1;
          action.timeScale = 1;
          action.enabled = true;
          action.setEffectiveWeight(1);
          action.paused = false;
          action.play();
        }

        scrollAnimations.forEach((name) => {
          const anim = actions[name];
          if (anim) {
            anim.reset();
            anim.timeScale = 1;
            anim.setLoop(THREE.LoopOnce, 1);
            anim.clampWhenFinished = true;
            anim.play();
          }
        });
        // console.log("ManRef.current.scale", ManRef.current.scale.toArray());
        gsap.to(ManRef.current.scale, {
          x: 0,
          y: 0,
          z: 0,
          duration: 0.5,
          ease: "power2.out",
        });

        const mainScroll = actions[scrollAnimations[6]];
        if (mainScroll) {
          mainScroll.getMixer().addEventListener("finished", () => {
            playedSecondScroll.current = true;
          });
        }
      },

      onLeaveBack: (self) => {
        scaleManToOriginalSize();
        scrollAnimations.forEach((name) => {
          const anim = actions[name];
          if (anim) {
            anim.reset();
            anim.setLoop(THREE.LoopOnce, 1);
            anim.clampWhenFinished = true;
            anim.time = 0.3;
            anim.timeScale = -1; // Inverse l'animation

            anim.play();
          }
        });
        const action = actions["1.2ndScroll"];
        if (action) {
          action.reset();
          action.setLoop(THREE.LoopOnce, 1);
          action.clampWhenFinished = true;

          action.time = action.getClip().duration;

          action.timeScale = -1;

          action.enabled = true;
          action.setEffectiveWeight(1);
          action.paused = false;
          action.play();
        }
        if (Math.abs(self.getVelocity()) > 2000) {
          enableOtherSections();
        }
      },
      onUpdate: (self) => {
        const progress = self.progress;
        secondScrollAnimations.forEach((name) => {
          const action = actions[name];
          if (action) {
            const duration = action.getClip().duration;
            action.paused = true;
            action.time = duration * progress;
            action.getMixer().update(0);
            action.play();
          }
        });
      },
    });

    return () => {
      mixer.stopAllAction();
    };
  }, []);

  return (
    <group ref={group} {...props} dispose={null} visible={isActive}>
      <group name="Empty" position={[4.089, 2.103, -0.346]}>
        <PerspectiveCamera
            name="Camera"
            makeDefault={isActive}
            far={1000}
            near={0.1}
            fov={19.157}
            rotation={[-Math.PI / 2, 1.519, Math.PI / 2]}
            scale={0.217}
        />
      </group>
      <group name="Scene"
             // scale={viewport.width < 5 ? 0.7 : 1}
             position-z={viewport.width < 1 ? -0.3 : 0.0}
      >
       <mesh
          name="Cylinder011"
          castShadow
          receiveShadow
          geometry={nodes.Cylinder011.geometry}
          material={materials.PaletteMaterial001}
          position={[0.003, 0.124, -0.002]}
          rotation={[-Math.PI, -0.93, -Math.PI]}
          scale={0.394}
        />
        <group
          name="Cylinder101"
          position={[0.072, 0.323, -0.067]}
          rotation={[0.259, -0.477, 0.113]}
          scale={[0.006, 0.111, 0.004]}>
          <mesh
            name="Cube031"
            castShadow
            receiveShadow
            geometry={nodes.Cube031.geometry}
            material={materials.PaletteMaterial001}
            position={[-5.587, 0.004, -0.017]}
            rotation={[-Math.PI, 0, -1.571]}
            scale={[0.805, 377.602, 56.544]}
          />
          <mesh
            name="Cylinder004"
            castShadow
            receiveShadow
            geometry={nodes.Cylinder004.geometry}
            material={materials.PaletteMaterial001}
            position={[-5.591, 0, 0]}
            scale={6.591}
          />
        </group>
        <mesh
          name="GroundCubeQuad003"
          castShadow
          receiveShadow
          geometry={nodes.GroundCubeQuad003.geometry}
          material={materials.PaletteMaterial002}
          position={[0.003, -0.067, -0.002]}
          scale={[0.349, 0.341, 0.349]}
        />
        <group
          name="Cube066"
          position={[-0.365, 0.269, 0.296]}
          rotation={[0, -0.432, 0]}
          scale={[0.01, 0.036, 0.01]}>
          <group
            name="Cube060"
            position={[4.865, 18.97, -5.005]}
            rotation={[0, -1.546, 0]}
            scale={[23.068, 8.486, 35.574]}>
            <group
              name="Cube059"
              position={[-1.286, -0.311, 0]}
              rotation={[0, 1.571, 0]}
              scale={[0.214, 0.068, 0.204]}>
              <group position={[0, -0.938, 0]} scale={1.938}>
                <mesh
                  name="Cube053"
                  castShadow
                  receiveShadow
                  geometry={nodes.Cube053.geometry}
                  material={materials.PaletteMaterial001}
                />
                <mesh
                  name="Cube053_1"
                  castShadow
                  receiveShadow
                  geometry={nodes.Cube053_1.geometry}
                  material={materials.PaletteMaterial001}
                />
              </group>
            </group>
            <mesh
              name="Cube061"
              castShadow
              receiveShadow
              geometry={nodes.Cube061.geometry}
              material={materials.PaletteMaterial001}
              position={[-0.719, -0.125, 0]}
              rotation={[0, Math.PI / 2, 0]}
              scale={[0.747, 1.762, 2.465]}
            />
            <group
              name="Cylinder129"
              position={[-1.265, -0.435, -0.003]}
              rotation={[0, 1.571, 0]}
              scale={[0.015, 0.231, 0.023]}>
              <mesh
                name="Torus001"
                castShadow
                receiveShadow
                geometry={nodes.Torus001.geometry}
                material={materials.PaletteMaterial001}
                position={[-0.201, -2.473, 0.626]}
                rotation={[Math.PI / 2, 0, -0.83]}
                scale={[12.674, 12.674, 0.935]}
              />
              <group position={[-0.05, -0.477, 0.561]} scale={3.798}>
                <mesh
                  name="Cylinder129_1"
                  castShadow
                  receiveShadow
                  geometry={nodes.Cylinder129_1.geometry}
                  material={materials.PaletteMaterial001}
                />
                <mesh
                  name="Cylinder129_2"
                  castShadow
                  receiveShadow
                  geometry={nodes.Cylinder129_2.geometry}
                  material={materials.PaletteMaterial001}
                />
              </group>
            </group>
            <mesh
              name="Cube054"
              castShadow
              receiveShadow
              geometry={nodes.Cube054.geometry}
              material={materials.PaletteMaterial001}
              position={[0, 0.011, 0]}
              scale={0.39}
            />
          </group>
          <mesh
            name="Cylinder121"
            castShadow
            receiveShadow
            geometry={nodes.Cylinder121.geometry}
            material={materials.PaletteMaterial001}
            position={[4.906, 15.504, -4.974]}
            scale={[6.219, 0.307, 6.219]}
          />
          <mesh
            name="Cube068"
            castShadow
            receiveShadow
            geometry={nodes.Cube068.geometry}
            material={materials.PaletteMaterial001}
            position={[4.904, 3.099, -5.005]}
            scale={12.241}
          />
        </group>
        <group name="Sphere001" position={[-0.203, 0.408, -0.21]} scale={0}>
          <mesh
            name="Sphere001_1"
            castShadow
            receiveShadow
            geometry={nodes.Sphere001_1.geometry}
            material={materials.PaletteMaterial001}
            position={[0, -2.289, 0]}
            scale={3.289}
          />
        </group>
        <group name="Cube" position={[0.006, 0.859, 0.222]} scale={0}>
          <mesh
            name="Cube004"
            castShadow
            receiveShadow
            geometry={nodes.Cube004.geometry}
            material={materials.PaletteMaterial001}
            position={[0, -3.285, 0]}
            scale={17.402}
          />
        </group>
        <mesh
          name="Retopo_Icosphere016"
          castShadow
          receiveShadow
          geometry={nodes.Retopo_Icosphere016.geometry}
          material={nodes.Retopo_Icosphere016.material}
          position={[-0.839, 1.323, -5.525]}
          scale={0.137}
        />
        <group name="Empty" position={[4.089, 2.103, -0.346]}>
          <PerspectiveCamera
            name="Camera"
            makeDefault={false}
            far={1000}
            near={0.1}
            fov={19.157}
            rotation={[-Math.PI / 2, 1.519, Math.PI / 2]}
            scale={0.217}
          />
        </group>
        <group
          name="Cylinder095"
          position={[0.004, 0.391, 0.002]}
          rotation={[-0.004, 0.02, -0.002]}
          scale={0.052}>
          <group name="Cylinder001" position={[0.006, 3.553, 0.007]} scale={0}>
            <group scale={0.9}>
              <mesh
                name="Cylinder001_1"
                castShadow
                receiveShadow
                geometry={nodes.Cylinder001_1.geometry}
                material={materials.PaletteMaterial001}
              />
              <mesh
                name="Cylinder001_2"
                castShadow
                receiveShadow
                geometry={nodes.Cylinder001_2.geometry}
                material={materials.PaletteMaterial001}
              />
            </group>
          </group>
          <mesh
            name="Cylinder096"
            castShadow
            receiveShadow
            geometry={nodes.Cylinder096.geometry}
            material={materials.PaletteMaterial001}
            position={[0, -0.132, 0]}
            rotation={[0, Math.PI / 2, 0]}
            scale={3.225}
          />
          <group
            name="Cylinder102"
            position={[0.424, 2.008, -0.803]}
            rotation={[2.137, 0.803, 0.456]}>
            <mesh
              name="Cylinder006"
              castShadow
              receiveShadow
              geometry={nodes.Cylinder006.geometry}
              material={materials.PaletteMaterial001}
              position={[0.028, -0.528, 0.003]}
              scale={0.531}
            />
          </group>
          <group position={[0, -0.214, 0]} scale={2.557}>
            <mesh
              name="Cylinder101_1"
              castShadow
              receiveShadow
              geometry={nodes.Cylinder101_1.geometry}
              material={materials.PaletteMaterial001}
            />
            <mesh
              name="Cylinder101_2"
              castShadow
              receiveShadow
              geometry={nodes.Cylinder101_2.geometry}
              material={materials.PaletteMaterial001}
            />
            <mesh
              name="Cylinder101_3"
              castShadow
              receiveShadow
              geometry={nodes.Cylinder101_3.geometry}
              material={materials.PaletteMaterial001}
            />
            <mesh
              name="Cylinder101_4"
              castShadow
              receiveShadow
              geometry={nodes.Cylinder101_4.geometry}
              material={materials.PaletteMaterial001}
            />
          </group>
        </group>
        <group name="Cylinder019" position={[0.005, 0.3, 0.387]} scale={0}>
          <group position={[0, 0.185, 0]} scale={3.541}>
            <mesh
              name="Cylinder007"
              castShadow
              receiveShadow
              geometry={nodes.Cylinder007.geometry}
              material={materials.PaletteMaterial001}
            />
            <mesh
              name="Cylinder007_1"
              castShadow
              receiveShadow
              geometry={nodes.Cylinder007_1.geometry}
              material={materials.PaletteMaterial001}
            />
            <mesh
              name="Cylinder007_2"
              castShadow
              receiveShadow
              geometry={nodes.Cylinder007_2.geometry}
              material={materials.PaletteMaterial001}
            />
            <mesh
              name="Cylinder007_3"
              castShadow
              receiveShadow
              geometry={nodes.Cylinder007_3.geometry}
              material={materials.PaletteMaterial001}
            />
            <mesh
              name="Cylinder007_4"
              castShadow
              receiveShadow
              geometry={nodes.Cylinder007_4.geometry}
              material={materials.PaletteMaterial001}
            />
            <mesh
              name="Cylinder007_5"
              castShadow
              receiveShadow
              geometry={nodes.Cylinder007_5.geometry}
              material={materials.PaletteMaterial001}
            />
          </group>
        </group>
        <group
          name="Armature002"
          position={[2.919, -1.205, -0.53]}
          rotation={[0, 1.107, 0]}
          scale={0.064}>
          <primitive object={nodes.Bone} />
          <primitive object={nodes.Bone007} />
          <primitive object={nodes.Bone008} />
        </group>
        <group
          name="Armature001"
          position={[0.052, 0.421, -0.086]}
          rotation={[0, -0.516, 0]}
          scale={0.029}
          ref={ManRef}
          >
          <group name="Retopo_Sphere001">
            <skinnedMesh
              name="mesh001"
              geometry={nodes.mesh001.geometry}
              material={materials.PaletteMaterial001}
              skeleton={nodes.mesh001.skeleton}
            />
            <skinnedMesh
              name="mesh001_1"
              geometry={nodes.mesh001_1.geometry}
              material={materials.PaletteMaterial001}
              skeleton={nodes.mesh001_1.skeleton}
            />
            <skinnedMesh
              name="mesh001_2"
              geometry={nodes.mesh001_2.geometry}
              material={materials.PaletteMaterial001}
              skeleton={nodes.mesh001_2.skeleton}
            />
            <group name="Empty005" position={[0.392, 1.453, 1.578]} scale={1.043} />
            <group name="Empty006" position={[-0.616, 0.807, 1.625]} scale={0.834} />
          </group>
          <primitive object={nodes.Bone_1} />
          <primitive object={nodes.Bone007_1} />
          <primitive object={nodes.Bone008_1} />
        </group>
        <group
          name="Retopo_Sphere002"
          position={[2.919, -1.205, -0.53]}
          rotation={[0, 1.107, 0]}
          scale={0.064}>
          <skinnedMesh
            name="mesh003"
            geometry={nodes.mesh003.geometry}
            material={materials.PaletteMaterial001}
            skeleton={nodes.mesh003.skeleton}
          />
          <skinnedMesh
            name="mesh003_1"
            geometry={nodes.mesh003_1.geometry}
            material={materials.PaletteMaterial001}
            skeleton={nodes.mesh003_1.skeleton}
          />
          <skinnedMesh
            name="mesh003_2"
            geometry={nodes.mesh003_2.geometry}
            material={materials.PaletteMaterial001}
            skeleton={nodes.mesh003_2.skeleton}
          />
          <group name="Empty001" position={[0.606, -0.576, 0.21]} scale={1.043} />
          <group name="Empty002" position={[-0.555, -0.686, 0.037]} scale={0.834} />
        </group>
      </group>
    </group>
  );
}

useGLTF.preload("./models/web3Webp.glb");